#!/usr/bin/env python3
"""
Backtest Result Visualization Tool

This script visualizes backtest results from CSV files generated by the Trade-Ngin backtest engine.

Usage:
    python3 visualize_backtest.py --results-dir <path_to_results_dir>
    
    Optional:
    --output-dir <path_to_output_dir>  # Default is results_dir/charts

Visualizations:
    - Performance dashboard (key metrics summary)
    - Equity curve with drawdowns
    - Monthly returns heatmap
    - P&L breakdown by symbol
    - Trade analysis (P&L distribution, win/loss metrics)

Requirements:
    pandas, matplotlib, seaborn, numpy
    Install with: pip install pandas matplotlib seaborn numpy
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import os
import argparse
from datetime import datetime

def load_backtest_data(results_dir):
    """Load all CSV files from backtest results directory"""
    data = {}
    
    # Load equity curve
    equity_path = os.path.join(results_dir, "equity_curve.csv")
    if os.path.exists(equity_path):
        data['equity'] = pd.read_csv(equity_path)
        data['equity']['timestamp'] = pd.to_datetime(data['equity']['timestamp'])
    
    # Load trade executions
    trades_path = os.path.join(results_dir, "trade_executions.csv")
    if os.path.exists(trades_path):
        data['trades'] = pd.read_csv(trades_path)
        data['trades']['timestamp'] = pd.to_datetime(data['trades']['timestamp'])
    
    # Load main results
    results_path = os.path.join(results_dir, "results.csv")
    if os.path.exists(results_path):
        data['results'] = pd.read_csv(results_path)
    
    # Load positions
    positions_path = os.path.join(results_dir, "final_positions.csv")
    if os.path.exists(positions_path):
        data['positions'] = pd.read_csv(positions_path)
    
    # Load symbol P&L if available
    symbol_pnl_path = os.path.join(results_dir, "symbol_pnl.csv")
    if os.path.exists(symbol_pnl_path):
        data['symbol_pnl'] = pd.read_csv(symbol_pnl_path)
    
    return data

def plot_equity_curve(data, output_dir):
    """Plot equity curve with drawdowns"""
    if 'equity' not in data:
        return

    plt.figure(figsize=(12, 6))
    
    # Plot equity curve
    equity = data['equity']
    plt.plot(equity['timestamp'], equity['equity'], label='Portfolio Value')
    
    # Calculate and plot drawdowns
    if len(equity) > 0:
        # Calculate rolling maximum
        equity['peak'] = equity['equity'].cummax()
        # Calculate drawdown in percentage terms
        equity['drawdown'] = (equity['equity'] - equity['peak']) / equity['peak'] * 100
        
        # Create twin axis for drawdown
        ax2 = plt.gca().twinx()
        ax2.fill_between(equity['timestamp'], equity['drawdown'], 0, 
                        color='red', alpha=0.3, label='Drawdown %')
        ax2.set_ylabel('Drawdown %')
        ax2.set_ylim(min(equity['drawdown'])*1.1, 5)  # Some padding at the bottom
    
    plt.title('Portfolio Equity Curve & Drawdowns')
    plt.xlabel('Date')
    plt.ylabel('Portfolio Value')
    plt.grid(True, alpha=0.3)
    plt.legend()
    
    # Save to file
    os.makedirs(output_dir, exist_ok=True)
    plt.savefig(os.path.join(output_dir, 'equity_curve.png'), dpi=150)
    plt.close()

def plot_monthly_returns(data, output_dir):
    """Create monthly returns heatmap"""
    if 'equity' not in data:
        return
        
    equity = data['equity']
    
    # Resample to month-end and calculate returns
    equity['month'] = equity['timestamp'].dt.to_period('M')
    monthly_returns = equity.groupby('month')['equity'].last().pct_change() * 100
    
    # Convert to a matrix for heatmap (year x month)
    monthly_returns.index = pd.PeriodIndex(monthly_returns.index)
    monthly_returns = monthly_returns.reset_index()
    monthly_returns['year'] = monthly_returns['month'].dt.year
    monthly_returns['month_num'] = monthly_returns['month'].dt.month
    
    # Pivot into year x month matrix
    heatmap_data = monthly_returns.pivot(index='year', columns='month_num', values='equity')
    
    # Plot heatmap
    plt.figure(figsize=(12, 8))
    sns.heatmap(heatmap_data, annot=True, fmt=".1f", cmap="RdYlGn", center=0,
               linewidths=.5, cbar_kws={'label': 'Monthly Return %'})
    
    plt.title('Monthly Returns Heatmap (%)')
    plt.xlabel('Month')
    plt.ylabel('Year')
    
    # Save to file
    os.makedirs(output_dir, exist_ok=True)
    plt.savefig(os.path.join(output_dir, 'monthly_returns.png'), dpi=150)
    plt.close()

def plot_pnl_by_symbol(data, output_dir):
    """Plot P&L breakdown by symbol"""
    if 'symbol_pnl' not in data:
        return
    
    symbol_pnl = data['symbol_pnl']
    
    plt.figure(figsize=(12, 6))
    
    # Sort by P&L descending
    symbol_pnl = symbol_pnl.sort_values('pnl', ascending=False)
    
    bars = plt.bar(symbol_pnl['symbol'], symbol_pnl['pnl'])
    
    # Color positive green, negative red
    for i, bar in enumerate(bars):
        if symbol_pnl.iloc[i]['pnl'] < 0:
            bar.set_color('red')
        else:
            bar.set_color('green')
            
    plt.title('P&L by Symbol')
    plt.xlabel('Symbol')
    plt.ylabel('P&L')
    plt.xticks(rotation=90)
    plt.grid(True, axis='y', alpha=0.3)
    
    # Add total P&L as text
    total_pnl = symbol_pnl['pnl'].sum()
    plt.text(0.02, 0.95, f'Total P&L: ${total_pnl:,.2f}', 
             transform=plt.gca().transAxes, fontsize=12)
    
    plt.tight_layout()
    
    # Save to file
    os.makedirs(output_dir, exist_ok=True)
    plt.savefig(os.path.join(output_dir, 'pnl_by_symbol.png'), dpi=150)
    plt.close()

def plot_trade_analysis(data, output_dir):
    """Create trade analysis charts"""
    if 'trades' not in data:
        return
    
    trades = data['trades']
    
    # Calculate P&L for each trade
    trades['pnl'] = trades['quantity'] * trades['price'] * -1  # Negative because buys subtract cash
    
    # Group by execution_id to combine legs of the same trade
    trade_pnl = trades.groupby('execution_id')['pnl'].sum().reset_index()
    
    # Plot P&L distribution
    plt.figure(figsize=(12, 6))
    plt.hist(trade_pnl['pnl'], bins=50, alpha=0.75, color='blue')
    plt.axvline(0, color='red', linestyle='--')
    plt.title('Trade P&L Distribution')
    plt.xlabel('P&L')
    plt.ylabel('Frequency')
    plt.grid(True, alpha=0.3)
    
    # Add statistics as text
    win_rate = (trade_pnl['pnl'] > 0).mean() * 100
    avg_win = trade_pnl[trade_pnl['pnl'] > 0]['pnl'].mean()
    avg_loss = trade_pnl[trade_pnl['pnl'] < 0]['pnl'].mean()
    
    stats_text = f"Win Rate: {win_rate:.1f}%\n"
    stats_text += f"Avg Win: ${avg_win:.2f}\n"
    stats_text += f"Avg Loss: ${avg_loss:.2f}\n"
    stats_text += f"Profit Factor: {abs(avg_win / avg_loss):.2f}"
    
    plt.text(0.02, 0.95, stats_text, transform=plt.gca().transAxes, 
             fontsize=10, verticalalignment='top',
             bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))
    
    # Save to file
    os.makedirs(output_dir, exist_ok=True)
    plt.savefig(os.path.join(output_dir, 'trade_pnl_distribution.png'), dpi=150)
    plt.close()

def plot_performance_dashboard(data, output_dir):
    """Create performance summary dashboard"""
    if 'results' not in data or 'equity' not in data:
        return
    
    results = data['results'].iloc[0]  # Get first row of results
    equity = data['equity']
    
    # Calculate additional metrics
    start_date = equity['timestamp'].min()
    end_date = equity['timestamp'].max()
    days = (end_date - start_date).days
    years = days / 365.25
    
    start_equity = equity['equity'].iloc[0]
    end_equity = equity['equity'].iloc[-1]
    total_return = (end_equity / start_equity - 1) * 100
    annualized_return = (((end_equity / start_equity) ** (1 / years)) - 1) * 100
    
    # Create dashboard figure
    plt.figure(figsize=(10, 8))
    plt.axis('off')
    
    # Title
    plt.text(0.5, 0.98, 'BACKTEST PERFORMANCE SUMMARY', 
             horizontalalignment='center', fontsize=16, weight='bold')
    
    # Period info
    period_text = f"Period: {start_date.strftime('%Y-%m-%d')} to {end_date.strftime('%Y-%m-%d')} ({days} days)"
    plt.text(0.5, 0.93, period_text, horizontalalignment='center', fontsize=12)
    
    # Performance Metrics
    metrics_text = [
        f"Total Return: {total_return:.2f}%",
        f"Annualized Return: {annualized_return:.2f}%",
        f"Sharpe Ratio: {results.sharpe_ratio:.2f}",
        f"Sortino Ratio: {results.sortino_ratio:.2f}",
        f"Max Drawdown: {results.max_drawdown*100:.2f}%",
        f"Volatility: {results.volatility*100:.2f}%",
        f"Calmar Ratio: {results.calmar_ratio:.2f}"
    ]
    
    # Add trading metrics
    trade_metrics = [
        f"Total Trades: {results.total_trades}",
        f"Win Rate: {results.win_rate*100:.2f}%",
        f"Profit Factor: {results.profit_factor:.2f}",
        f"Average Win: ${results.avg_win:.2f}",
        f"Average Loss: ${results.avg_loss:.2f}",
        f"Avg Holding Period: {results.avg_holding_period:.1f} days"
    ]
    
    # Plot metrics
    for i, metric in enumerate(metrics_text):
        plt.text(0.1, 0.85 - i*0.04, metric, fontsize=11)
    
    for i, metric in enumerate(trade_metrics):
        plt.text(0.6, 0.85 - i*0.04, metric, fontsize=11)
    
    # Add mini equity curve
    ax1 = plt.axes([0.1, 0.3, 0.8, 0.2])
    ax1.plot(equity['timestamp'], equity['equity'])
    ax1.set_title('Equity Curve', fontsize=10)
    ax1.tick_params(axis='both', which='major', labelsize=8)
    plt.xticks(rotation=45)
    ax1.grid(True, alpha=0.3)
    
    # Add mini drawdown chart
    equity['peak'] = equity['equity'].cummax()
    equity['drawdown'] = (equity['equity'] - equity['peak']) / equity['peak'] * 100
    
    ax2 = plt.axes([0.1, 0.05, 0.8, 0.15])
    ax2.fill_between(equity['timestamp'], equity['drawdown'], 0, color='red', alpha=0.5)
    ax2.set_title('Drawdown (%)', fontsize=10)
    ax2.tick_params(axis='both', which='major', labelsize=8)
    plt.xticks(rotation=45)
    ax2.grid(True, alpha=0.3)
    
    plt.tight_layout(rect=[0, 0, 1, 0.97])
    
    # Save to file
    os.makedirs(output_dir, exist_ok=True)
    plt.savefig(os.path.join(output_dir, 'performance_dashboard.png'), dpi=150)
    plt.close()

def plot_turnover_analysis(data, output_dir):
    """Plot portfolio turnover metrics"""
    if 'trades' not in data or 'equity' not in data:
        return
    
    trades = data['trades']
    equity = data['equity']
    
    # Group by day and calculate absolute value of trades (buys + sells)
    trades['date'] = trades['timestamp'].dt.date
    daily_volume = trades.groupby('date')['quantity'].apply(lambda x: np.abs(x).sum()).reset_index()
    daily_volume['date'] = pd.to_datetime(daily_volume['date'])
    
    # Merge with equity data to get portfolio value
    daily_volume['month'] = daily_volume['date'].dt.to_period('M')
    equity['date'] = equity['timestamp'].dt.date
    
    # Get average equity per month
    monthly_equity = equity.groupby(equity['timestamp'].dt.to_period('M'))['equity'].mean().reset_index()
    monthly_equity.columns = ['month', 'avg_equity']
    
    # Get total volume per month
    monthly_volume = daily_volume.groupby(daily_volume['date'].dt.to_period('M'))['quantity'].sum().reset_index()
    monthly_volume.columns = ['month', 'total_volume']
    
    # Merge to calculate turnover
    monthly_turnover = pd.merge(monthly_volume, monthly_equity, on='month')
    monthly_turnover['turnover'] = monthly_turnover['total_volume'] / monthly_turnover['avg_equity']
    
    # Plot monthly turnover
    plt.figure(figsize=(12, 6))
    plt.bar(monthly_turnover['month'].astype(str), monthly_turnover['turnover'], color='blue', alpha=0.7)
    plt.axhline(monthly_turnover['turnover'].mean(), color='red', linestyle='--', 
               label=f'Average: {monthly_turnover["turnover"].mean():.2f}')
    
    plt.title('Monthly Portfolio Turnover')
    plt.xlabel('Month')
    plt.ylabel('Turnover (volume/equity)')
    plt.xticks(rotation=90)
    plt.grid(True, axis='y', alpha=0.3)
    plt.legend()
    
    plt.tight_layout()
    
    # Save to file
    os.makedirs(output_dir, exist_ok=True)
    plt.savefig(os.path.join(output_dir, 'monthly_turnover.png'), dpi=150)
    plt.close()

def main():
    parser = argparse.ArgumentParser(description='Visualize backtest results')
    parser.add_argument('--results-dir', required=True, help='Directory containing backtest CSV files')
    parser.add_argument('--output-dir', default=None, help='Directory to save charts (defaults to results_dir/charts)')
    args = parser.parse_args()
    
    # Set default output directory if not specified
    if not args.output_dir:
        args.output_dir = os.path.join(args.results_dir, 'charts')
    
    # Load backtest data
    print(f"Loading backtest data from {args.results_dir}...")
    data = load_backtest_data(args.results_dir)
    
    if not data:
        print("No data files found!")
        return
    
    # Create visualizations
    print("Creating visualizations...")
    
    print("- Plotting equity curve...")
    plot_equity_curve(data, args.output_dir)
    
    print("- Creating performance dashboard...")
    plot_performance_dashboard(data, args.output_dir)
    
    print("- Plotting monthly returns heatmap...")
    plot_monthly_returns(data, args.output_dir)
    
    print("- Plotting P&L by symbol...")
    plot_pnl_by_symbol(data, args.output_dir)
    
    print("- Analyzing trade performance...")
    plot_trade_analysis(data, args.output_dir)
    
    print("- Analyzing portfolio turnover...")
    plot_turnover_analysis(data, args.output_dir)
    
    print(f"Done! Charts saved to {args.output_dir}")
    print(f"View the performance dashboard at: {os.path.join(args.output_dir, 'performance_dashboard.png')}")

if __name__ == "__main__":
    main() 